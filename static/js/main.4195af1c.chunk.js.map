{"version":3,"sources":["TokenPassThroughAuthProvider.tsx","OutlookCategorizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TokenPassThroughAuthProvider","authtoken","this","Promise","resolve","reject","OutlookCategorizer","client","categories","folders","existingCategoryFolders","createdCategoryFolders","auth","Client","initWithMiddleware","authProvider","Set","getUser","createMailSearchFolders","api","get","userDetails","console","log","response","callback","data","add","displayName","PageIterator","iterate","toLowerCase","pageIterator","isComplete","resume","inbox","parentFolderId","getCategories","getFolders","getRootFolderId","rootFolderId","Array","from","values","category","indexOf","searchFolderCreateRequest","post","ReactDOM","render","StrictMode","join","document","getElementById","APIClientForm","props","state","token","handleChange","bind","handleSubmit","event","preventDefault","setState","target","value","Form","onSubmit","FormGroup","FormLabel","FormControl","placeholder","as","rows","type","size","name","id","onChange","FormText","Button","variant","React","App","Boolean","window","location","hostname","match","Container","fluid","Row","className","Col","xs","href","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4195af1c.chunk.js","sourcesContent":["import \"isomorphic-fetch\";\nimport { AuthenticationProvider } from \"@microsoft/microsoft-graph-client\";\n\n/**\n  * @module TokenPassThroughAuthProvider\n  */\n\nexport class TokenPassThroughAuthProvider implements AuthenticationProvider {\n\n    private authtoken: string;\n\n    /**\n\t * @public\n\t * @constructor\n\t * Creates an instance of TokenPassThroughAuthProvider\n\t * @param {string} authtoken - A valid and appropriately scoped Graph API auth token\n\t * @returns An instance of CustomAuthenticationProvider\n\t */\n\tpublic constructor(authtoken: string) {\n\t\tthis.authtoken = authtoken;\n    }\n    \n\t/**\n\t * @public\n\t * @async\n\t * To get the access token\n\t * @returns The promise that resolves to an access token\n\t */\n\tpublic getAccessToken(): Promise<any> {\n\t\treturn new Promise((resolve: (accessToken: string) => void, reject: (error: any) => void) => {\n            if (this.authtoken) {\n                resolve(this.authtoken);\n            } else {\n                reject(\"No Auth Token Provided\");\n            }\n\t\t});\n\t}\n\n}","import \"isomorphic-fetch\";\nimport { Client, PageCollection, PageIterator, PageIteratorCallback } from \"@microsoft/microsoft-graph-client\";\nimport { TokenPassThroughAuthProvider } from \"./TokenPassThroughAuthProvider\";\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nexport class OutlookCategorizer {\n\n    private client: Client;\n    private categories: Set<String>\n    private folders: Set<String>\n    private existingCategoryFolders: Set<String>\n    private createdCategoryFolders: Set<String>\n\n    public constructor(authtoken: string) {\n        var auth = new TokenPassThroughAuthProvider(authtoken);\n        this.client = Client.initWithMiddleware({ authProvider: auth });\n        this.categories = new Set();\n        this.folders = new Set();\n        this.existingCategoryFolders = new Set();\n        this.createdCategoryFolders = new Set();\n\n        this.getUser()\n        this.createMailSearchFolders();\n    }\n\n    public async getUser(): Promise<void> {\n        try {\n            let userDetails = await this.client.api('/me').get()\n            console.log(userDetails);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public async getCategories(): Promise<void> {\n        this.categories = new Set();\n\n        try {\n            // Makes request to fetch mails list. Which is expected to have multiple pages of data.\n            let response: PageCollection = await this.client.api(\"/me/outlook/masterCategories?$top=500\").get();\n            // A callback function to be called for every item in the collection. This call back should return boolean indicating whether not to continue the iteration process.\n            let callback: PageIteratorCallback = (data) => {\n                this.categories.add(data.displayName);\n                return true;\n            };\n            // Creating a new page iterator instance with client a graph client instance, page collection response from request and callback\n            let pageIterator = new PageIterator(this.client, response, callback);\n            // This iterates the collection until the nextLink is drained out.\n            pageIterator.iterate();\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    public async getFolders(): Promise<void> {\n        this.folders = new Set();\n\n        try {\n            // Makes request to fetch mails list. Which is expected to have multiple pages of data.\n            let response: PageCollection = await this.client.api(\"/me/mailFolders?$top=500\").get();\n            // A callback function to be called for every item in the collection. This call back should return boolean indicating whether not to continue the iteration process.\n            let callback: PageIteratorCallback = (data) => {\n                this.folders.add(data.displayName.toLowerCase())\n                return true;\n            };\n            // Creating a new page iterator instance with client a graph client instance, page collection response from request and callback\n            let pageIterator = new PageIterator(this.client, response, callback);\n            // This iterates the collection until the nextLink is drained out.\n            pageIterator.iterate();\n\n            if (!pageIterator.isComplete()) {\n                pageIterator.resume();\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    public async getRootFolderId(): Promise<String> {\n        try {\n            let inbox = await this.client.api('/me/mailFolders/inbox').get()\n            return inbox.parentFolderId\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    public async createMailSearchFolders(): Promise<void> {\n        await this.getCategories();\n        await this.getFolders();\n        let rootFolderId = await this.getRootFolderId();\n        let categories = Array.from(this.categories.values());\n        let folders = Array.from(this.folders.values());\n\n        this.existingCategoryFolders = new Set();\n        this.createdCategoryFolders = new Set();\n\n\n        for (let category of categories) {\n            if (folders.indexOf(category.toLowerCase()) > -1) {\n                console.log(category + \" folder already exists! Skipping this category.\");\n                this.existingCategoryFolders.add(category);\n            }\n            else {\n                var searchFolderCreateRequest = {\n                    \"@odata.type\": \"microsoft.graph.mailSearchFolder\",\n                    \"displayName\": category,\n                    \"includeNestedFolders\": true,\n                    \"sourceFolderIds\": [rootFolderId],\n                    \"filterQuery\": `categories/any(t: t eq '${category}')`\n                }\n\n                console.log(searchFolderCreateRequest);\n\n                try {\n                    await this.client.api(`/me/mailFolders/${rootFolderId}/childFolders`).post(searchFolderCreateRequest);\n                    this.createdCategoryFolders.add(category);\n                }\n                catch (e) {\n                    throw e;\n                }\n\n            }\n\n        }\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <p><strong>Existing virtual category folders or conflicting folder names:</strong></p>\n                <p>\n                    {Array.from(this.existingCategoryFolders.values()).join(', ')}\n                </p>\n                <p><strong>Newly created virtual mail folders:</strong></p>\n                <p>\n                    {Array.from(this.createdCategoryFolders.values()).join(', ')}\n\n                </p>\n            </React.StrictMode>,\n            document.getElementById('results'));\n    }\n\n\n}","import * as React from 'react'\nimport {Form, FormGroup, Button, FormControl, FormLabel, FormText} from 'react-bootstrap'\nimport { OutlookCategorizer } from './OutlookCategorizer';\n\n\nclass APIClientForm extends React.Component<{}, {token: string}> {\n  constructor(props: any) {\n    super(props);\n    this.state = { token: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event: any) {\n    new OutlookCategorizer(this.state.token);\n    event.preventDefault();\n  }\n\n  handleChange(event: any) {\n    this.setState({ token: event.target.value });\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormGroup>\n        <FormLabel>\n          Graph API Explorer Access Token:\n         </FormLabel>\n          <FormControl placeholder=\"Graph API Access token\"  as=\"textarea\" rows={6} type=\"text\" size=\"sm\" name=\"accesstoken\" id=\"tokenfield\" onChange={this.handleChange}/>\n          <FormText>\n            This API token is not stored. It is only used locally in your browser to use the Microsoft Graph API directly.\n          </FormText>\n        </FormGroup>\n        <Button variant=\"primary\" type=\"submit\">Create virtual category folders</Button>\n      </Form>\n     \n    );\n  }\n}\n\nfunction App() {\n  return (\n    <APIClientForm />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container fluid='sm'>\n      <Row className=\"justify-content-md-center\">\n        <Col />\n        <Col xs={10}>\n          <h1>Outlook virtually categorized</h1>\n          <h5>This app creates cross-device, cross-client virtual\n            folders for each of your Outlook categories.</h5>\n          <hr />\n          <p>\n            For more information and the source code of this app, please visit <a href=\"https://github.com/berndverst/outlook-categorized\">berndverst/outlook-categorized</a>.\n            </p>\n          <p>\n            <strong>Instructions</strong>\n            <ol>\n              <li>\n                Visit <a href=\"https://developer.microsoft.com/graph/graph-explorer?wt.mc_id=outlookcategorized-github-beverst\">Microsoft Graph Explorer</a>&nbsp;\n            to obtain an API access token for your account.\n            <ol>\n                  <li>Sign into your Office365 or Outlook account.</li>\n                  <li>Click on the Access Token tab.</li>\n                  <li>Click on the Copy icon or manually copy the token text.</li>\n                </ol>\n              </li>\n              <li>\n                Paste the access token below and press the button to automatically create new virtual folders that will sync across your devices and email clients.\n          </li>\n            </ol>\n          </p>\n          <App />\n        </Col>\n        <Col />\n      </Row>\n      &nbsp;\n      <Row />\n      <Row>\n        <Col />\n        <Col xs={10}>\n          <div id='results' />\n        </Col>\n        <Col />\n      </Row>\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}